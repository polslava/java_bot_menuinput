import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ForceReplyKeyboard;

import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

//import org.telegram.telegrambots.meta.api.objects.*;

import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

public class MyChannelBot extends TelegramLongPollingBot {
    private final BotSettings botSettings;
    private final AdSettings adSettings;

    public MyChannelBot() throws Exception {
        this.botSettings = new BotSettings();
        this.adSettings = new AdSettings();
    }

    @Override
    public String getBotUsername() {
        return botSettings.getBotUsername();
    }

    @Override
    public String getBotToken() {
        return botSettings.getBotToken();
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasCallbackQuery()) {
            onCallbackQueryReceived(update.getCallbackQuery());
        } else if (update.hasMessage() && update.getMessage().hasText()) {
            Message message = update.getMessage();
            String text = message.getText();
            long userId = message.getFrom().getId();
            String username = message.getFrom().getUserName();
            Long chatId = message.getChatId();

            try {
                switch (text) {
                    case "/start":
                        sendMainMenu(chatId);
                        break;
                    case "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
                        sendBotInfo(chatId);
                        break;
                    case "üåê –°–∞–π—Ç":
                        sendWebsiteLink(chatId);
                        break;
                    case "üì¢ –†–µ–∫–ª–∞–º–∞":
                        sendAdMaterials(chatId);
                        break;
                    case "üìù –ó–∞–ø–∏—Å—å":
                        requestConsultationDate(chatId);
                        break;
                    case "üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏":
                        sendUserBookings(userId, chatId);
                        break;
                    default:
                        processDateInput(text, userId, chatId, username);
                        break;
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private ReplyKeyboardMarkup createMainMenuKeyboard() {
        ReplyKeyboardMarkup markup = new ReplyKeyboardMarkup();
        markup.setResizeKeyboard(true);
        markup.setOneTimeKeyboard(false);

        List<KeyboardRow> rows = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è");
        row1.add("üåê –°–∞–π—Ç");

        KeyboardRow row2 = new KeyboardRow();
        row2.add("üì¢ –†–µ–∫–ª–∞–º–∞");
        row2.add("üìù –ó–∞–ø–∏—Å—å");

        KeyboardRow row3 = new KeyboardRow();
        row3.add("üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏");

        rows.add(row1);
        rows.add(row2);
        rows.add(row3);

        markup.setKeyboard(rows);
        return markup;
    }

    private void sendMainMenu(Long chatId) throws TelegramApiException {
        SendMessage msg = new SendMessage();
        msg.setChatId(chatId.toString());
        msg.setText("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:");
        msg.setReplyMarkup(createMainMenuKeyboard());

        // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
        System.out.println("–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –≤ —á–∞—Ç: " + chatId);

        execute(msg);
    }

    private void sendBotInfo(Long chatId) throws TelegramApiException {
        String info = "üë®üíª –í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞:\n"
                + "‚Ä¢ –ò–º—è: " + botSettings.getOwnerName() + "\n"
                + "‚Ä¢ Telegram: " + botSettings.getOwnerAccount() + "\n"
                + "‚Ä¢ GitHub: " + botSettings.getOwnerGitHub() + "\n"
                + "‚Ä¢ BI —Å—Ç–∞—Ç—å–∏: " + adSettings.getBiArticlesLink();
        execute(new SendMessage(chatId.toString(), info));
    }

    private void sendWebsiteLink(Long chatId) throws TelegramApiException {
        execute(new SendMessage(chatId.toString(), "üåê –°–∞–π—Ç: " + botSettings.getOwnerWebsite()));
    }

    private void sendAdMaterials(Long chatId) throws TelegramApiException {
        execute(new SendMessage(chatId.toString(), adSettings.getChannelAdText()));
    }

    private void requestConsultationDate(Long chatId) throws TelegramApiException {
       /*   SendMessage msg = new SendMessage();
        msg.setChatId(chatId.toString());
        msg.setText("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n–ü—Ä–∏–º–µ—Ä: 25.12.2024 14:30");
        msg.setReplyMarkup(new ForceReplyKeyboard());
        execute(msg);*/


      //  –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ requestConsultationDate
        // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤—ã–±–æ—Ä–æ–º –¥–∞—Ç—ã.


     //   private void requestConsultationDate(Long chatId) throws TelegramApiException {
        SendMessage msg = new SendMessage();
        msg.setChatId(chatId.toString());
        msg.setText("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:");

        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–∞—Ç–∞–º–∏
         InlineKeyboardMarkup button = new InlineKeyboardMarkup();
       /*button.setText(formattedDate);
        button.setCallbackData(formattedDate); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callback_data
*/
        List<List<InlineKeyboardButton>> keyboardRows = new ArrayList<>();

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –¥–∞—Ç–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–µ–∫—É—â–∏–µ —Ç—Ä–∏ –¥–Ω—è)
        for (int i = 0; i < 3; i++) {
            Calendar calendar = Calendar.getInstance();
            calendar.add(Calendar.DATE, i); // –¢–µ–∫—É—â–∏–π –¥–µ–Ω—å + i –¥–Ω–µ–π
            Date date = calendar.getTime();
            SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");
            String formattedDate = sdf.format(date);

            // InlineKeyboardButton button = new InlineKeyboardButton(formattedDate, formattedDate);
            InlineKeyboardButton button1 = new InlineKeyboardButton(); //(formattedDate, null, formattedDate, null, null, null, null, null, null);
            button1.setText(formattedDate);
            button1.setCallbackData(formattedDate); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callback_data

            List<InlineKeyboardButton> row = new ArrayList<>();
            row.add(button1);
            keyboardRows.add(row);
        }

        button.setKeyboard(keyboardRows);
        msg.setReplyMarkup(button);

        execute(msg);
        }

    private void processDateInput(String text, long userId, Long chatId, String username) {
        SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy HH:mm");
        sdf.setLenient(false);
        System.out.println(userId);
        try {
            Date parsedDate = sdf.parse(text);
            String formattedDate = sdf.format(parsedDate);
            DatabaseManager.addConsultation(userId, username, formattedDate);
            execute(new SendMessage(chatId.toString(), "‚úÖ –ó–∞–ø–∏—Å—å –Ω–∞ " + formattedDate + " —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞"));
            System.out.println(userId);
        } catch (ParseException e) {
            sendErrorMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú");
            System.out.println(userId);
        } catch (Exception e) {
            sendErrorMessage(chatId, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏");
            System.out.println(userId);

        }
    }

    private void sendUserBookings(long userId, Long chatId) throws SQLException, TelegramApiException {
        try {
            String bookings = DatabaseManager.getUserConsultations(userId);
            if (bookings == null || bookings.isEmpty()) {
                sendErrorMessage(chatId, "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.");
                return;
            }
            execute(new SendMessage(chatId.toString(), bookings));
        } catch (SQLException e) {
            e.printStackTrace();
            sendErrorMessage(chatId, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: " + e.getMessage());
        } catch (TelegramApiException e) {
            e.printStackTrace();
            sendErrorMessage(chatId, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: " + e.getMessage());
        } catch (Exception e) {
            e.printStackTrace();
            sendErrorMessage(chatId, "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: " + e.getMessage());
        }
    }


    private void sendErrorMessage(Long chatId, String text) {
        try {
            execute(new SendMessage(chatId.toString(), text));
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }


  /*  @Override
    public void onCallbackQueryReceived(CallbackQuery callbackQuery) {
        String data = callbackQuery.getData(); // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
        long userId = callbackQuery.getFrom().getId();
        Long chatId = callbackQuery.getMessage().getChatId();

        if (data.matches("\\d{2}.\\d{2}.\\d{4}")) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–∞—Ç–∞
            showAvailableTimeslots(data, userId, chatId);
        }
    }*/

   // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏.

    public void onCallbackQueryReceived(CallbackQuery callbackQuery) {
        String data = callbackQuery.getData(); // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏–ª–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        long userId = callbackQuery.getFrom().getId();
        Long chatId = callbackQuery.getMessage().getChatId();
        String username = callbackQuery.getFrom().getUserName();

        System.out.println(data);
        if (data.matches("\\d{2}.\\d{2}.\\d{4}")) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–∞—Ç–∞
            showAvailableTimeslots(data, userId, chatId);
        } else if (data.contains(" ")) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
            String[] parts = data.split(" ");
            String selectedDate = parts[0];
            String selectedTime = parts[1];

            saveBooking(selectedDate, selectedTime, userId, chatId);
        } else {
            sendErrorMessage(chatId, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö");
        }

    }

   // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –¥–∞—Ç–æ–π
   // –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–µ—Ä–µ—Ç –¥–∞—Ç—É, –±–æ—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–º—É –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã. –î–ª—è —ç—Ç–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–µ–º callback –∑–∞–ø—Ä–æ—Å—ã.


    //–≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã.

    private void showAvailableTimeslots(String selectedDate, long userId, Long chatId) {
        SendMessage msg = new SendMessage();
        msg.setChatId(chatId.toString());
        msg.setText("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:");

        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboardRows = new ArrayList<>();

        for (int hour = 8; hour <= 18; hour++) {
            String timeSlot = String.format("%02d:00-%02d:59", hour, hour + 1);
            InlineKeyboardButton button = new InlineKeyboardButton();
            button.setText(timeSlot);
            button.setCallbackData(selectedDate + " " + timeSlot);

            List<InlineKeyboardButton> row = new ArrayList<>();
            row.add(button);
            keyboardRows.add(row);
        }

        inlineKeyboardMarkup.setKeyboard(keyboardRows);
        msg.setReplyMarkup(inlineKeyboardMarkup);

        try {
            execute(msg);
        } catch (TelegramApiException e) {
            e.printStackTrace();
            sendErrorMessage(chatId, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤: " + e.getMessage());
        }
    }


    //–≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å –æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
private void saveBooking(String selectedDate, String selectedTime, long userId, Long chatId) {
        String fullDateTime = selectedDate + " " + selectedTime.substring(0, 5); // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        try {
            DatabaseManager.addConsultation(userId, "", fullDateTime);
            execute(new SendMessage(chatId.toString(), "‚úÖ –ó–∞–ø–∏—Å—å –Ω–∞ " + fullDateTime + " —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞"));
        } catch (Exception e) {
            sendErrorMessage(chatId, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏");
        }
    }
}
